#!/usr/bin/python3
import os, sys, subprocess
import shutil
import pathlib
import tempfile
import os.path
import stempeg
import numpy as np
import mutagen.flac
import mutagen.mp4
import logging
import pkg_resources

import stemutil

import mutagen.easymp4

# Install missing easymp4 labels. TODO: Push back to mutagen
def gen_pair_handlers(first_label):
    pair_get = mutagen.easymp4.EasyMP4Tags.Get[first_label]
    pair_set = mutagen.easymp4.EasyMP4Tags.Set[first_label]

    def pair_total_get(tags, key):
        second = None
        try:
            second = pair_get(tags, first_label)[0]
            if "/" in second:
                second = second.split("/")[1]
            second = int(second)
        except KeyError:
            second = 0
        return [second]
    def pair_total_set(tags, key, value):
        first = None
        try:
            first = pair_get(tags, first_label)[0]
            if "/" in first:
                first = pair.split("/")[0]
            first = int(first)
        except KeyError:
            first = 0
        value = u"{}/{}".format(first, value[0])
        pair_set(tags, first_label, [value])

    def pair_total_del(tags, key):
        pair_total_set(key,0)

    return (pair_total_get,pair_total_set,pair_total_del)

mutagen.easymp4.EasyMP4Tags.RegisterKey('tracktotal', *gen_pair_handlers('tracknumber'))
mutagen.easymp4.EasyMP4Tags.RegisterKey('disctotal', *gen_pair_handlers('discnumber'))
mutagen.easymp4.EasyMP4Tags.RegisterFreeformKey("isrc", "ISRC", mean="com.apple.iTunes")
isrc_setter = mutagen.easymp4.EasyMP4Tags.Set["isrc"]
def wrap_isrc_atom(tags, key, value):
    if not isinstance(value, mutagen.mp4.MP4FreeForm):
        value = mutagen.mp4.MP4FreeForm(value, dataformat=AtomDataType.ISRC)
    isrc_setter(tags, key, value)
mutagen.easymp4.EasyMP4Tags.Set["isrc"] = isrc_setter 
mutagen.easymp4.EasyMP4Tags.RegisterTextKey('lyrics','\xa9lyr')
mutagen.easymp4.EasyMP4Tags.RegisterTextKey('composer','\xa9wrt')
mutagen.easymp4.EasyMP4Tags.RegisterTextKey('cover','covr')



log = logging.getLogger(__name__)

def print_help():
    print("Usage: %s INPUT_FILENAME" % sys.argv[0])

if len(sys.argv) != 2:
    print_help()
    sys.exit(-1)

track = sys.argv[1]

if not os.path.exists(track):
    print("Input file %s does not exist" % (track))
    sys.exit(-1)

log.info("Converting %s to Native Instruments stem file", track)

tmp_path = tempfile.mkdtemp(prefix="stem-")

## spleeter separate
# spleeter separate -o ./stems -p spleeter:4stems $INPUT_FILENAME
# TODO: Replace with prediction based on exported/saved model.

spleeter_env = dict(os.environ)
if "MODEL_PATH" not in spleeter_env:
    spleeter_env["MODEL_PATH"] = pkg_resources.resource_filename('stemutil','models/spleeter')

subprocess.run(["spleeter", "separate", "--filename_format", "{instrument}.{codec}",
                                        "--output_path", tmp_path,
                                        "--params_filename", os.path.join(spleeter_env["MODEL_PATH"],"4stems.json"),
                                        track], env=spleeter_env)

if not os.path.exists(os.path.join(tmp_path,"drums.wav")):
    sys.exit(-1)

## Convert to stem

mix, sample_rate = stempeg.read.read_stems(track)
drums, _ = stempeg.read.read_stems(os.path.join(tmp_path,"drums.wav"))
bass, _ = stempeg.read.read_stems(os.path.join(tmp_path,"bass.wav"))
synth, _ = stempeg.read.read_stems(os.path.join(tmp_path,"other.wav"))
vocals, _ = stempeg.read.read_stems(os.path.join(tmp_path,"vocals.wav"))

S = np.stack((mix, drums, bass, synth, vocals))

'''
stems_meta = [
    {'name': "drums", 'color': "FFA500"},
    {'name': "bass", 'color': "FFFF00"},
    {'name': "synth", 'color': "008080"},
    {'name': "vocals", 'color': "800080"}
]
'''

ni_writer = stempeg.write.NIStemsWriter(codec='alac')

stempeg.write_stems(path=os.path.join(tmp_path,'output.stem.mp4'), data=S, sample_rate=sample_rate, 
		    writer=ni_writer)


## Fixup metadata

log.info("Fixing Metadata")

log.debug("Reading Metadata")

src_info = mutagen.flac.Open(track)
dst_info = mutagen.easymp4.EasyMP4(os.path.join(tmp_path,'output.stem.mp4'))

log.info("Checking for cover art")

cover_path = os.path.join(os.path.dirname(track),'cover.jpg')
cover_data = None
if os.path.isfile(cover_path):
    with open(cover_path,'rb') as cover_fh:
        cover_data = cover_fh.read()

log.info("Cover art %s", "found, adding to metadata" if cover_data is None else "not found")

if cover_data is not None:
    mp4_cover = mutagen.mp4.MP4Cover(cover_data, imageformat=mutagen.mp4.MP4Cover.FORMAT_JPEG)
    dst_info['cover'] = [mp4_cover]

log.info("Copying FLAC Metadata to MP4")

for k,v in src_info.items():
    dst_info[k] = v

dst_info.save()

# Move files

output_dir = os.path.join("stems",src_info['artist'][0], src_info['album'][0])

log.debug("Creating directory %s", output_dir)

pathlib.Path(output_dir).mkdir(parents=True, exist_ok=True)

filename =  os.path.splitext(os.path.basename(track))[0] + ".stem.mp4"
dest_path = os.path.join(output_dir, filename)

os.rename(os.path.join(tmp_path,'output.stem.mp4'), dest_path)

## Delete tmp_path

shutil.rmtree(tmp_path)
